name: Build

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  PROJECT_NAME: bi

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # - name: linux-arm64
          # runner: ubuntu-latest
          # target: aarch64-unknown-linux-gnu
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          - name: win-arm64
            runner: windows-latest
            target: aarch64-pc-windows-msvc
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Install Target for Cross Compilation
        run: rustup target add ${{ matrix.target }}

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Install zip (Windows only)
        if: runner.os == 'Windows'
        run: choco install zip -y

      - name: Build Binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Release Binary
        id: release_binary
        shell: bash
        run: |
          BIN_SUFFIX=""
          ARCHIVE_SUFFIX="tar.gz"
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
            ARCHIVE_SUFFIX="zip"
          fi

          # The built binary output location
          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"

          # Define standardized name for the final binary based on platform and architecture
          PLATFORM=""
          case "${{ matrix.name }}" in
            linux-amd64) PLATFORM="Linux_x86_64" ;;
            linux-arm64) PLATFORM="Linux_arm64" ;;
            macos-amd64) PLATFORM="Darwin_x86_64" ;;
            macos-arm64) PLATFORM="Darwin_arm64" ;;
            win-amd64) PLATFORM="Windows_x86_64" ;;
            win-arm64) PLATFORM="Windows_arm64" ;;
          esac

          BIN_RELEASE_VERSIONED="${PROJECT_NAME}_${{ github.ref_name }}_${PLATFORM}.${ARCHIVE_SUFFIX}"

          # Package the binary
          if [[ "${ARCHIVE_SUFFIX}" == "tar.gz" ]]; then
            tar -czvf "./${BIN_RELEASE_VERSIONED}" -C "$(dirname "${BIN_OUTPUT}")" "$(basename "${BIN_OUTPUT}")"
          else
            zip "./${BIN_RELEASE_VERSIONED}" "${BIN_OUTPUT}"
          fi

          # Output for later steps
          echo "BIN_RELEASE_VERSIONED=${BIN_RELEASE_VERSIONED}" >> $GITHUB_OUTPUT

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}-binary
          path: ./${{ steps.release_binary.outputs.BIN_RELEASE_VERSIONED }}

  create_release:
    needs: build # This waits for the build job to finish for all runners
    runs-on: ubuntu-latest # Only one runner will create the release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

  upload_assets:
    needs: [create_release, build] # Wait for both the build job and the release creation
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
          # - name: linux-arm64
          #   runner: ubuntu-latest
          - name: win-amd64
            runner: windows-latest
          - name: win-arm64
            runner: windows-latest
          - name: macos-amd64
            runner: macos-latest
          - name: macos-arm64
            runner: macos-latest

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.name }}-binary

      - name: Set Variables
        id: set_vars
        shell: bash
        run: |
          BIN_SUFFIX=""
          ARCHIVE_SUFFIX="tar.gz"
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
            ARCHIVE_SUFFIX="zip"
          fi
          PLATFORM=""
          case "${{ matrix.name }}" in
            linux-amd64) PLATFORM="Linux_x86_64" ;;
            linux-arm64) PLATFORM="Linux_arm64" ;;
            macos-amd64) PLATFORM="Darwin_x86_64" ;;
            macos-arm64) PLATFORM="Darwin_arm64" ;;
            win-amd64) PLATFORM="Windows_x86_64" ;;
            win-arm64) PLATFORM="Windows_arm64" ;;
          esac
          BIN_RELEASE_VERSIONED="${PROJECT_NAME}_${{ github.ref_name }}_${PLATFORM}.${ARCHIVE_SUFFIX}"
          echo "BIN_RELEASE_VERSIONED=${BIN_RELEASE_VERSIONED}" >> $GITHUB_OUTPUT

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.set_vars.outputs.BIN_RELEASE_VERSIONED }}
          asset_name: ${{ steps.set_vars.outputs.BIN_RELEASE_VERSIONED }}
          asset_content_type: application/octet-stream
